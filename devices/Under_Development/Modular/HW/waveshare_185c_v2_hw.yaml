# Waveshare ESP32-S3-Touch-LCD-1.85C v2 / 1.85C-BOX v2 hardware pack. v1.03

# --- BUSES / PERIPHERALS ------------------------------------------------------
spi:
  id: display_qspi
  type: quad
  clk_pin: 40
  data_pins: [46, 45, 42, 41]

i2c:
  id: touchscreen_bus
  sda: 11
  scl: 10

pca9554:
  - id: pca9554a_device
    address: 0x20

i2s_audio:
  - id: i2s_mic
    i2s_lrclk_pin: GPIO2
    i2s_bclk_pin: GPIO15
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO38
    i2s_bclk_pin: GPIO48
    #sample_rate: 48000

external_components:
  - source: github://pr#10392
    components: [mipi_spi]
    refresh: 1h

# --- AUDIO DEVICES ------------------------------------------------------------
microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_mic
    i2s_din_pin: GPIO39
    adc_type: external
    channel: right
    pdm: false
    sample_rate: 16000
    bits_per_sample: 16bit

#speaker:
#  - platform: i2s_audio
#    id: box_speaker
#    i2s_audio_id: i2s_audio_bus
#    i2s_dout_pin: GPIO47
#    dac_type: external
#    channel: mono
speaker:
  - platform: i2s_audio_bus
    id: box_speaker
    dac_type: external
    i2s_dout_pin: GPIO47
    #sample_rate: 48000
  - platform: mixer
    id: mixer_speaker_id
    output_speaker: box_speaker
    source_speakers:
      - id: announcement_spk_mixer_input
      - id: media_spk_mixer_input
  - platform: resampler
    id: media_spk_resampling_input
    output_speaker: media_spk_mixer_input
  - platform: resampler
    id: announcement_spk_resampling_input
    output_speaker: announcement_spk_mixer_input    

# --- BACKLIGHT ----------------------------------------------------------------
output:
  - platform: ledc
    id: backlight_output
    pin: GPIO5
    inverted: false

light:
  - platform: monochromatic
    id: Sled
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 250ms

# --- TOUCHSCREEN --------------------------------------------------------------
touchscreen:
  - platform: cst816
    id: my_touchscreen
    interrupt_pin: 4
    reset_pin:
      pca9554: pca9554a_device
      number: 0
    display: main_display
    i2c_id: touchscreen_bus

    on_touch:
      then:
        - lambda: |-
            id(gs_touch_active) = true;
            id(gs_start_x) = touch.x;
            id(gs_start_y) = touch.y;
            id(gs_last_x)  = touch.x;
            id(gs_last_y)  = touch.y;
            id(gs_start_ms) = millis();

    on_update:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            for (auto &t : touches) {
              if (t.state >= 1 && t.state <= 2) {
                id(gs_last_x) = t.x;
                id(gs_last_y) = t.y;
                break;
              }
            }

    on_release:
      then:
        - lambda: |-
            if (!id(gs_touch_active)) return;
            id(gs_touch_active) = false;

            const int start_x = id(gs_start_x);
            const int start_y = id(gs_start_y);
            const int end_x   = id(gs_last_x);
            const int end_y   = id(gs_last_y);
            const int dx = end_x - start_x;
            const int dy = end_y - start_y;
            const uint32_t dt = millis() - id(gs_start_ms);

            // Scale thresholds with screen
            const int w = id(main_display).get_width();
            const int h = id(main_display).get_height();
            const int min_dim = (w < h) ? w : h;
            const int MIN_DIST = std::max(20, min_dim / 6);
            const uint32_t MAX_TIME = 1200; // ms

            // Normalize for display rotation
            const int ROT = ${rotate_display};
            int ndx = dx, ndy = dy;
            switch (ROT) {
              case 0:   break;
              case 90:  ndx =  dy;  ndy = -dx; break;
              case 180: ndx = -dx;  ndy = -dy; break;
              case 270: ndx = -dy;  ndy =  dx; break;
              default: break;
            }

            bool is_left=false, is_right=false, is_up=false, is_down=false;

            if (dt <= MAX_TIME) {
              if (std::abs(ndx) > std::abs(ndy) && std::abs(ndx) >= MIN_DIST) {
                if (ndx < 0) is_left = true; else is_right = true;
              } else if (std::abs(ndy) >= MIN_DIST) {
                if (ndy < 0) is_up = true; else is_down = true;
              }
            }

            // If nothing: treat as tap
            if (!(is_left || is_right || is_up || is_down)) {
              id(touch_input).publish_state(true);
              delay(250);
              id(touch_input).publish_state(false);
              return;
            }

            // Always expose to HA
            if (is_left)  id(swipe_left).publish_state(true);
            if (is_right) id(swipe_right).publish_state(true);
            if (is_up)    id(swipe_up).publish_state(true);
            if (is_down)  id(swipe_down).publish_state(true);
            delay(200);
            id(swipe_left).publish_state(false);
            id(swipe_right).publish_state(false);
            id(swipe_up).publish_state(false);
            id(swipe_down).publish_state(false);

            // Optional local handling (by switch)
            if (id(swipe_local).state) {
              if (is_left)  id(swipe_left_action).execute();
              if (is_right) id(swipe_right_action).execute();
              if (is_up)    id(swipe_up_action).execute();
              if (is_down)  id(swipe_down_action).execute();
            }

# --- BATTERY ADC --------------------------------------------------------------
sensor:
  - platform: adc
    pin: GPIO8
    name: "Battery Voltage"
    id: battery_voltage
    attenuation: 12db
    accuracy_decimals: 2
    update_interval: 10s
    unit_of_measurement: "V"
    icon: mdi:battery-medium
    filters:
      - multiply: 3.0
      - median:
          window_size: 7
          send_every: 7
          send_first_at: 1
      - throttle: 1min
    on_value:
      then:
        - sensor.template.publish:
            id: battery_percentage
            state: !lambda 'return x;'

# --- DISPLAY DRIVER (MIPI SPI JC3636W518) ------------------------------------
display:
  - platform: mipi_spi
    id: main_display
    model: JC3636W518V2
    rotation: 180
    cs_pin: 21
    reset_pin:
      pca9554: pca9554a_device
      number: 1
    update_interval: never
    pages: !include ../display_pages.yaml
